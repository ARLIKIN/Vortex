var XMLHttpRequest = require('xhr2');
var stringSimilarity = require("string-similarity");

var games = undefined
var titles = []
Array.prototype.myFind = function(obj) {
    return this.filter(function(item) {
        for (var prop in obj)
            if (!(prop in item) || obj[prop] !== item[prop])
                return false;
        return true;
    });
};

//Save Steam Apps
async function gameArray(callback) {
    if (typeof games !== "undefined") {
        callback(titles, games)
    } else {
        let xhr = new XMLHttpRequest();
        xhr.open('GET', 'https://api.steampowered.com/ISteamApps/GetAppList/v0002/?format=json');
        xhr.send();
        xhr.onload = function() {
            if (xhr.status == 200) {
                games = JSON.parse(xhr.response)
                titles = games.applist.apps.map(x => x = x.name)
                callback(titles, games)
            }
        };
    }
}

//Search By Name
async function searchItem(search, callback) {
    gameArray(function(titles, games) {
        let results = games.applist.apps.myFind({ name: stringSimilarity.findBestMatch(search, titles).bestMatch.target })
        let final = [...new Set(results)];
        callback(final[0])
    })
}
//Get Data by ID
function getByID(id, callback) {
    let xhr = new XMLHttpRequest();
    xhr.open('GET', 'https://store.steampowered.com/api/appdetails?appids=' + id);
    xhr.send();
    xhr.onload = function() {
        if (xhr.status == 200) {
            if (JSON.parse(xhr.response)[id + ""].success) {
                callback(JSON.parse(xhr.response)[id + ""].data)
            }
        } else {
            callback(JSON.parse('{"' + id + '":{"success":false}}'))
        }
    };
}
module.exports = { getByID, searchItem }